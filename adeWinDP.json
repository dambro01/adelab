{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"metadata": {
		"description": "Deploys 1 Key vault, 1 encrypted Windows VM with AAD (Dual Pass)",
		"author": "Didier Ambroise",
		"GitHub": "https://github.com/dambro01/adelab",
		"Enablement": "https://learn.microsoft.com/en-us/troubleshoot/azure/virtual-machines/welcome-virtual-machines",
		"deploymentLink": "https://labbox.azurewebsites.net/api/Labbox?url=https://supportability.visualstudio.com/AzureIaaSVM/_git/Labbox?path=/SME/Encryption/adeWinDP.json"
	},
	"parameters": {
		"adminUsername": {
			"type": "string",
			"maxLength": 20,
			"metadata": {
				"description": "Username for the Virtual Machines."
			}
		},
		"adminPassword": {
			"type": "securestring",
			"minLength": 12,
			"metadata": {
				"description": "Password for the Virtual Machines."
			}
		},
		"objectId": {
			"type": "string",
			"metadata": {
				"description": "Specifies your object ID. Get it by using Get-AzADUser -SignedIn cmdlet."
			}
		},
		"aadClientID": {
			"type": "string",
			"metadata": {
				"description": "Client ID of AAD app which has permissions to KeyVault"
			}
		},
		"aadOjectID": {
			"type": "string",
			"metadata": {
				"description": "Object ID of AAD app which has permissions to KeyVault"
			}
		},
		"aadClientSecret": {
			"type": "securestring",
			"metadata": {
				"description": "Client Secret of AAD app which has permissions to KeyVault"
			}
		},
		"yourPublicIP": {
			"type": "string",
			"defaultValue": "*",
			"metadata": {
				"description": "Specify your IP to allow connectivity to the VM from the NSG. Do a quick search for 'my ip' and enter your IP here. This will be placed in your NSG to allow access to the labs. If left as the default value '*', the NSG will use * for the IP address. This is not recommended as CSS policy will automatically remove this rule within a few minutes for security purposes and your LabBox will then require JIT or a new rule with your IP address specified."
			}
		}
	},
	"variables": {
		"vmName": "adeWinDP",
		"nicName": "myVMNic",
		"addressPrefix": "10.0.0.0/16",
		"subnetName": "Subnet",
		"subnetPrefix": "10.0.0.0/24",
		"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
		"virtualNetworkName": "MyVNET",
		"publicIPAddressName": "myPublicIP",
		"networkSecurityGroupName": "default-NSG",
		"encryptionOperation": "EnableEncryption",
		"KeyEncryptionAlgorithm": "RSA-OAEP",
		"KeyVaultURL": "[concat('https://', variables('vaultName'), '.vault.azure.net/')]",
		"KeyVaultResourceId": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.KeyVault/vaults/', variables('vaultName'))]",
		"VolumeType": "ALL",
		"SequenceVersion": "051ff53f-1837-45e1-a013-5521c52b665c",
		"extensionName": "AzureDiskEncryption",
		"extensionVersion": "1.1",
		"updateVmUrl": "https://supportability.visualstudio.com/AzureIaaSVM/_git/Labbox?path=/nested/dpupdatevm.json",
		"storageAccountType": "Standard_LRS",
		"vmSize": "Standard_B2ms",
		"location": "[resourceGroup().location]",
		"storageUri": "[format('store{0}', uniqueString(resourceGroup().id))]",
		"keyName": "[concat('key-', uniqueString(resourceGroup().id))]",
		"vaultName": "[concat('keyvault-', uniqueString(resourceGroup().id))]"
	},
	"resources": [
		{
			"type": "Microsoft.KeyVault/vaults",
			"apiVersion": "2019-09-01",
			"name": "[variables('vaultName')]",
			"location": "[variables('location')]",
			"properties": {
				"enabledForDeployment": "[true()]",
				"enabledForDiskEncryption": "[true()]",
				"enabledForTemplateDeployment": "[true()]",
				"enableSoftDelete": "[true()]",
				"softDeleteRetentionInDays": 7,
				"enablePurgeProtection": "[true()]",
				"tenantId": "[subscription().tenantId]",
				"accessPolicies": [
					{
						"objectId": "[parameters('objectId')]",
						"tenantId": "[subscription().tenantId]",
						"permissions": {
							"keys": [
								"Get",
								"List",
								"Update",
								"Create",
								"Import",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"Decrypt",
								"Encrypt",
								"UnwrapKey",
								"WrapKey",
								"Verify",
								"Sign",
								"Purge"
							],
							"secrets": [
								"Get",
								"List",
								"Set",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"Purge"
							],
							"certificates": [
								"Get",
								"List",
								"Update",
								"Create",
								"Import",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"ManageContacts",
								"ManageIssuers",
								"GetIssuers",
								"ListIssuers",
								"SetIssuers",
								"DeleteIssuers",
								"Purge"
							]
						}
					},
					{
						"objectId": "[parameters('aadOjectID')]",
						"tenantId": "[subscription().tenantId]",
						"permissions": {
							"keys": [
								"Get",
								"List",
								"Update",
								"Create",
								"Import",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"Decrypt",
								"Encrypt",
								"UnwrapKey",
								"WrapKey",
								"Verify",
								"Sign",
								"Purge"
							],
							"secrets": [
								"Get",
								"List",
								"Set",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"Purge"
							],
							"certificates": [
								"Get",
								"List",
								"Update",
								"Create",
								"Import",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"ManageContacts",
								"ManageIssuers",
								"GetIssuers",
								"ListIssuers",
								"SetIssuers",
								"DeleteIssuers",
								"Purge"
							]
						}
					}
				],
				"sku": {
					"name": "Standard",
					"family": "A"
				},
				"networkAcls": {
					"defaultAction": "Allow",
					"bypass": "AzureServices"
				}
			}
		},
		{
			"type": "Microsoft.KeyVault/vaults/keys",
			"apiVersion": "2021-10-01",
			"name": "[concat(variables('vaultName'), '/', variables('keyName'))]",
			"location": "[variables('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', variables('vaultName'))]"
			],
			"properties": {
				"kty": "RSA",
				"keySize": 4096
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2020-08-01",
			"name": "[variables('publicIPAddressName')]",
			"location": "[variables('location')]",
			"properties": {
				"publicIPAllocationMethod": "Dynamic"
			}
		},
{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2020-08-01",
			"name": "[variables('networkSecurityGroupName')]",
			"location": "[variables('location')]",
			"properties": {
				"securityRules": [
					{
						"name": "AllowInboundAccess",
						"properties": {
							"priority": 1001,
							"access": "Allow",
							"direction": "Inbound",
							"destinationPortRange": "3389",
							"protocol": "Tcp",
							"sourceAddressPrefix": "[parameters('yourPublicIP')]",
							"sourcePortRange": "*",
							"destinationAddressPrefix": "*"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"apiVersion": "2020-08-01",
			"name": "[variables('virtualNetworkName')]",
			"location": "[variables('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
			],
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[variables('subnetName')]",
						"properties": {
							"addressPrefix": "[variables('subnetPrefix')]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2020-08-01",
			"name": "[variables('nicName')]",
			"location": "[variables('location')]",
			"dependsOn": [
				"[variables('publicIPAddressName')]",
				"[variables('virtualNetworkName')]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
							},
							"subnet": {
								"id": "[variables('subnetRef')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2021-06-01",
			"name": "[variables('storageUri')]",
			"location": "[variables('location')]",
			"sku": {
				"name": "[variables('storageAccountType')]"
			},
			"kind": "StorageV2",
			"properties": {}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2020-12-01",
			"name": "[variables('vmName')]",
			"location": "[variables('location')]",
			"dependsOn": [
				"[variables('nicName')]"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[variables('vmSize')]"
				},
				"osProfile": {
					"computerName": "[variables('vmName')]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "MicrosoftWindowsServer",
						"offer": "WindowsServer",
						"sku": "2019-Datacenter",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					},
					"dataDisks": [
						{
							"diskSizeGB": 16,
							"lun": 0,
							"createOption": "Empty"
						}
					]
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat('https://', variables('storageUri'), '.blob.core.windows.net')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('vmName'),'/disksetup')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
			],
			"properties": {
				"source": {
					"script": "[concat('Start-Transcript; $debugpreference=''continue''; $disk = Get-Disk | Where-Object partitionstyle -EQ \"raw\" | Sort-Object number; $label = \"data1\"; $driveLetter = \"F\"; $disk | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -UseMaximumSize -DriveLetter $driveLetter |Format-Volume -FileSystem NTFS -NewFileSystemLabel $label -Confirm:$false -Force;')]"
				},
				"timeoutInSeconds": 300
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('vmName'),'/', variables('extensionName'))]",
			"apiVersion": "2016-04-30-preview",
			"location": "[variables('location')]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('vmName')))]",
				"[resourceId('Microsoft.Compute/virtualMachines/runCommands', variables('vmName'), 'disksetup')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Security",
				"type": "AzureDiskEncryption",
				"typeHandlerVersion": "[variables('extensionVersion')]",
				"autoUpgradeMinorVersion": true,
				"forceUpdateTag": "[variables('sequenceVersion')]",
				"protectedSettings": {
					"AADClientSecret": "[parameters('aadClientSecret')]"
				},
				"settings": {
					"AADClientID": "[parameters('aadClientID')]",
					"AADClientCertThumbprint": "",
					"KeyVaultURL": "[variables('keyVaultURL')]",
					"KeyEncryptionAlgorithm": "[variables('keyEncryptionAlgorithm')]",
					"VolumeType": "[variables('volumeType')]",
					"EncryptionOperation": "[variables('encryptionOperation')]"
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"name": "updatevm",
			"apiVersion": "2015-01-01",
			"dependsOn": [
				"[resourceId('Microsoft.Compute/virtualMachines/extensions',  variables('vmName'), variables('extensionName'))]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('updateVmUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"vmName": {
						"value": "[variables('vmName')]"
					},
					"keyVaultResourceID": {
						"value": "[variables('keyVaultResourceID')]"
					},
					"keyVaultSecretUrl": {
						"value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions',  variables('vmName'), variables('extensionName'))).instanceView.statuses[0].message]"
					}
				}
			}
		}
	]
}